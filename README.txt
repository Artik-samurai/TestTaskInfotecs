Тестовое задание cервис-хранилище типа "ключ-значение" от компании  Infotecs Academy

Необходимо разработать простой сервис который будет хранить данные в оперативной памяти по текстовому ключу. 
https://ru.wikipedia.org/wiki/База_данных_«ключ-значение»

Необходимая функциональность:

1. Операция чтения (get)
	Принимает следующие параметры:
		a) ключ для хранилища.
	Возвращает данные, хранящиеся по переданному ключу или метку отсутствия данных.
	
2. Операция записи (set)
	Принимает следующие параметры:
		a) ключ для хранилища;
		b) данные для хранилища, которые будут ассоциированы с переданным ключом;
		c) опциональный параметр ttl (продолжительность жизни записи), 
			по истечении данного временного промежутка данная пара ключ-значение должна автоматически удаляться из хранилища.
			Если параметр не передан - использовать ttl по-умолчанию.

	Если по переданному ключу уже хранятся данные - их нужно заменять, а также обновлять ttl у данной записи.
	Возвращает метку успешности или неуспешности операции.

3. Операция удаления (remove)
	Принимает следующие параметры:
		a) ключ для хранилища.
	Удаляет данные, хранящиеся по переданному ключу.
	Возвращает данные, хранившиеся по переданному ключу или метку отсутствия данных.

4. Операция сохранения текущего состояния (dump)
	Сохраняет текущее состояние хранилища и возвращает его в виде загружаемого файла.
	
5. Операция загрузки состояния хранилища (load)
	Загружает состояние хранилища из файла, созданного операцией dump (пункт 4).

6 (дополнительно). Библиотека-драйвер, позволяющая работать с вашим удалённым сервисом из java-кода. Что-похожее на драйвера к базам данных.
	Т.е. для инициализации библиотека получает адрес+порт вашего сервиса и при вызове её методов обращается к вашему сервису.

Требования к сервису:

1. При создании сервиса можно воспользоваться любым из указанных фреймворков: Spring Framework, Spring Boot, или написать приложение на чистой Java.
2. Сервис должен запускаться как standalone-приложение (java -jar service.jar).
3. Необходимо покрыть код unit-тестами. Полнота покрытия остается на усмотрение автора решения.
4. Приложение должно собираться с использованием Maven или Gradle.
5. Общение с сервисом должно осуществляться по протоколу HTTP. По возможности придерживайтесь REST-архитектуры.
6. Не использовать отдельно устанавливаемые базы данных, кэши и т.п. 
	Можно хранить данные в памяти приложения или использовать простые встраиваемые базы данных (HSQLDB, H2 или Apache Derby).


			Описание:
Для построения сервиса использовалась jdk 16.0 и Spring Boot 2.5.4
Для хранения данных в оперативной памяти используется база данных H2
Пароль и логин стандартные, настройки находятся в файле applocation.properties
Для тестирования всех запросов необходим Postman
Сервис запускается по порту localhost:8080

			Запуск проекта:
Запустить приложение можно с помощью класса TestTaskInfotecsApplicationTests через среду, или выполнив TestTaskInfotecs-0.0.1-SNAPSHOT.jar файл через консоль, 
используя java -jar target/TestTaskInfotecs-0.0.1-SNAPSHOT.jar, или выполнив команды запуска maven в терминале среды

		Описание стректуры проекта:
KeyValueController.class 					   - Controller сервиса для обработки запросов клиента
KeyValue.class 		 					   - Entity сервиса, необходимый для описания модели ключ-значение
DefaultAdvice.class , NotValidValueException.class, Response.class - классы, отвечающие за обработку исключений
MyRepository 							   - Интервейс имплимитирующий JpaRepository, отвечающий за взаимодействие с базой данных
ServiceImpl.class 						   - Сервисный класс, реализующий основную бизнес-логику сервиса
TestTaskInfotecsApplication.class 				   - точка входа приложения

		Описание операций сервиса:

1. Операция добавления/изменения

Доступна по адресу localhost:8080/set
Пример: localhost:8080/set?key=Ahm&value=Mumbai&ttl=2000000

Метод возвращает при успехе Http статус 200 OK и сообщение успеха, 
при ошибке выкидывает исключение c сообщением ошибки и BAD_REQUEST, 
принимает параметры ключа, значения и времени жизни
Для построения Http-запроса используется PUT метод

2. Операция извлечения 

Доступна по адресу localhost:8080/get
Пример: localhost:8080/get?key=Ahm

Метод возвращает при успехе Http статус 200 OK и KeyValue сущность,
при ошибке выкидывает исключение c сообщением ошибки и BAD_REQUEST, 
принимает параметры ключа
Для построения Http-запроса используется Get метод

3. Операция удаления

Доступна по адресу localhost:8080/remove
Пример: localhost:8080/remove?key=Ahm

Метод возвращает при успехе Http статус 200 OK и KeyValue удаленной сущности,
при ошибке выкидывает исключение c сообщением ошибки и BAD_REQUEST, 
принимает параметры ключа,
Для построения Http-запроса используется Delete метод

4. Операция добавления в файл

Доступна по адресу localhost:8080/dump
Пример: localhost:8080/dump

Метод возвращает при успехе Http статус 200 OK и сообщение успеха со списком загруженных файлов
Для построения Http-запроса используется Post метод

Создает файл с именем dump.txt или загружает в уже имеющийся файл данные

5. Операция загрузки из файла

Доступна по адресу localhost:8080/load
Пример: localhost:8080/load

Метод возвращает при успехе Http статус 200 OK и сообщение успеха
Загружает данные из файла dump.txt
Для построения Http-запроса используется Post метод

6. Сервис покрыт тестами, которые находятся в классе MyTests, тесты проверяют основную функциональность методов